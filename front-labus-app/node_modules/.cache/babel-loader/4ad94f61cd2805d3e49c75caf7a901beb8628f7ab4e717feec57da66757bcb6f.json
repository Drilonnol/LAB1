{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Drilon\\\\Desktop\\\\front-labus-app\\\\src\\\\components\\\\spitalilist.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getSpitaletList } from \"../actions/SpitaliAction\";\nimport { verifikimi } from '../actions/SingupAction';\nimport Spitali from \"./Spitali/spitali\"; // Import the Spitali component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SpitaliList() {\n  _s();\n  const {\n    qyteti_id\n  } = useParams();\n  const dispatch = useDispatch();\n  const [previousEmployeeListLength, setPreviousEmployeeListLength] = useState(0);\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n  const employeeList = useSelector(state => state.spitaliReducerContent.spitalis);\n  useEffect(() => {\n    const token = localStorage.getItem('jwtToken');\n    if (!token) {\n      setIsAuthenticated(false);\n    } else {\n      dispatch(verifikimi(token)).then(response => {\n        setIsAuthenticated(response.status);\n      });\n    }\n  }, [dispatch]);\n  useEffect(() => {\n    if (isAuthenticated === false) return; // Ensure useEffect is called unconditionally\n    dispatch(getSpitaletList(qyteti_id));\n  }, [dispatch, qyteti_id, isAuthenticated]); // Dependencies include isAuthenticated\n\n  useEffect(() => {\n    if (employeeList.length !== previousEmployeeListLength) {\n      const lastEmploye = employeeList[employeeList.length - 1];\n      const {\n        id,\n        name\n      } = lastEmploye;\n      alert(`Employe me ID: ${id} dhe emrin: \"${name}\" është shtuar i fundit`);\n    }\n    // Përditëso gjendjen e mëparshme të listës\n    setPreviousEmployeeListLength(employeeList.length);\n  }, [employeeList, previousEmployeeListLength]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: `/createSpitaliForm/${qyteti_id}`,\n      className: \"btn btn-danger\",\n      children: \"Create Employee\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), employeeList.map(spitali => /*#__PURE__*/_jsxDEV(Spitali, {\n      qyteti_id: qyteti_id,\n      spitali: spitali\n    }, spitali.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(SpitaliList, \"s9xKPs4u6QbjGCAVZ99Lrp5eBtc=\", false, function () {\n  return [useParams, useDispatch, useSelector];\n});\n_c = SpitaliList;\nexport default SpitaliList;\nvar _c;\n$RefreshReg$(_c, \"SpitaliList\");","map":{"version":3,"names":["React","useEffect","useState","Link","useParams","useDispatch","useSelector","getSpitaletList","verifikimi","Spitali","jsxDEV","_jsxDEV","SpitaliList","_s","qyteti_id","dispatch","previousEmployeeListLength","setPreviousEmployeeListLength","isAuthenticated","setIsAuthenticated","employeeList","state","spitaliReducerContent","spitalis","token","localStorage","getItem","then","response","status","length","lastEmploye","id","name","alert","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","map","spitali","_c","$RefreshReg$"],"sources":["C:/Users/Drilon/Desktop/front-labus-app/src/components/spitalilist.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getSpitaletList } from \"../actions/SpitaliAction\";\r\nimport { verifikimi } from '../actions/SingupAction';\r\nimport Spitali from \"./Spitali/spitali\"; // Import the Spitali component\r\n\r\nfunction SpitaliList() {\r\n    const { qyteti_id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const [previousEmployeeListLength, setPreviousEmployeeListLength] = useState(0); \r\n    const [isAuthenticated, setIsAuthenticated] = useState(null);\r\n    const employeeList = useSelector((state) => state.spitaliReducerContent.spitalis);\r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('jwtToken');\r\n        if (!token) {\r\n            setIsAuthenticated(false);\r\n        } else {\r\n            dispatch(verifikimi(token)).then(response => {\r\n                setIsAuthenticated(response.status);\r\n            });\r\n        }\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (isAuthenticated === false) return; // Ensure useEffect is called unconditionally\r\n        dispatch(getSpitaletList(qyteti_id));\r\n    }, [dispatch, qyteti_id, isAuthenticated]); // Dependencies include isAuthenticated\r\n\r\n    useEffect(() => {\r\n        if (employeeList.length !== previousEmployeeListLength) { \r\n            const lastEmploye = employeeList[employeeList.length - 1];\r\n            const { id, name } = lastEmploye;\r\n            alert(`Employe me ID: ${id} dhe emrin: \"${name}\" është shtuar i fundit`);\r\n        }\r\n        // Përditëso gjendjen e mëparshme të listës\r\n        setPreviousEmployeeListLength(employeeList.length);\r\n    }, [employeeList, previousEmployeeListLength]);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Link to={`/createSpitaliForm/${qyteti_id}`} className=\"btn btn-danger\">Create Employee</Link>\r\n            <hr />\r\n            {employeeList.map((spitali) => \r\n                <Spitali qyteti_id={qyteti_id} key={spitali.id} spitali={spitali} />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SpitaliList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}