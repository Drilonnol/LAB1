{"ast":null,"code":"import { CREATE_USER, LOGIN_USER } from \"../actions/type\";\nimport axios from \"axios\";\nimport { GET_ERRORS } from \"../actions/type\";\nexport const createUser = user => async dispatch => {\n  try {\n    const response = await axios.post(`http://localhost:8083/auth/signup`, user);\n    //window.location.href = `/`\n    dispatch({\n      type: CREATE_USER,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const login = newPacinet => async dispatch => {\n  try {\n    const response = await axios.post('http://localhost:8083/aut/signin', newPacinet);\n    if (response.data.status) {\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: response.data.jwt\n      });\n      localStorage.setItem('jwtToken', response.data.jwt);\n      return response.data;\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: response.data.message\n      });\n      return response.data;\n    }\n  } catch (error) {\n    dispatch({\n      type: 'LOGIN_FAILURE',\n      payload: error.message\n    });\n    return {\n      status: false,\n      message: error.message\n    };\n  }\n};","map":{"version":3,"names":["CREATE_USER","LOGIN_USER","axios","GET_ERRORS","createUser","user","dispatch","response","post","type","payload","data","error","login","newPacinet","status","jwt","localStorage","setItem","message"],"sources":["C:/Users/Drilon/Desktop/front-labus-app/src/actions/SingupAction.js"],"sourcesContent":["import { CREATE_USER, LOGIN_USER } from \"../actions/type\";\r\nimport axios from \"axios\";\r\nimport { GET_ERRORS } from \"../actions/type\";\r\n\r\nexport const createUser = (user) => async (dispatch) => {\r\n    try {\r\n        const response = \r\n        await axios.post(`http://localhost:8083/auth/signup`,user);\r\n        //window.location.href = `/`\r\n        dispatch({\r\n            type: CREATE_USER,\r\n            payload: response.data\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: error.response.data\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const login = (newPacinet) => async (dispatch) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:8083/aut/signin', newPacinet);\r\n  \r\n      if (response.data.status) {\r\n        dispatch({ type: 'LOGIN_SUCCESS', payload: response.data.jwt });\r\n        localStorage.setItem('jwtToken', response.data.jwt);\r\n        return response.data;\r\n\r\n        dispatch({ type: 'LOGIN_FAILURE', payload: response.data.message });\r\n        return response.data;\r\n      }\r\n\r\n    } catch (error) {\r\n      dispatch({ type: 'LOGIN_FAILURE', payload: error.message });\r\n      return { status: false, message: error.message };\r\n    }\r\n\r\n  };\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,UAAU,QAAQ,iBAAiB;AACzD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,iBAAiB;AAE5C,OAAO,MAAMC,UAAU,GAAIC,IAAI,IAAK,MAAOC,QAAQ,IAAK;EACpD,IAAI;IACA,MAAMC,QAAQ,GACd,MAAML,KAAK,CAACM,IAAI,CAAC,mCAAmC,EAACH,IAAI,CAAC;IAC1D;IACAC,QAAQ,CAAC;MACLG,IAAI,EAAET,WAAW;MACjBU,OAAO,EAAEH,QAAQ,CAACI;IACtB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZN,QAAQ,CAAC;MACLG,IAAI,EAAEN,UAAU;MAChBO,OAAO,EAAEE,KAAK,CAACL,QAAQ,CAACI;IAC5B,CAAC,CAAC;EACN;AACJ,CAAC;AAGD,OAAO,MAAME,KAAK,GAAIC,UAAU,IAAK,MAAOR,QAAQ,IAAK;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,kCAAkC,EAAEM,UAAU,CAAC;IAEjF,IAAIP,QAAQ,CAACI,IAAI,CAACI,MAAM,EAAE;MACxBT,QAAQ,CAAC;QAAEG,IAAI,EAAE,eAAe;QAAEC,OAAO,EAAEH,QAAQ,CAACI,IAAI,CAACK;MAAI,CAAC,CAAC;MAC/DC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEX,QAAQ,CAACI,IAAI,CAACK,GAAG,CAAC;MACnD,OAAOT,QAAQ,CAACI,IAAI;MAEpBL,QAAQ,CAAC;QAAEG,IAAI,EAAE,eAAe;QAAEC,OAAO,EAAEH,QAAQ,CAACI,IAAI,CAACQ;MAAQ,CAAC,CAAC;MACnE,OAAOZ,QAAQ,CAACI,IAAI;IACtB;EAEF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdN,QAAQ,CAAC;MAAEG,IAAI,EAAE,eAAe;MAAEC,OAAO,EAAEE,KAAK,CAACO;IAAQ,CAAC,CAAC;IAC3D,OAAO;MAAEJ,MAAM,EAAE,KAAK;MAAEI,OAAO,EAAEP,KAAK,CAACO;IAAQ,CAAC;EAClD;AAEF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}